generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Tenant {
    id          String     @id @default(cuid())
    name        String
    shopDomain  String     @unique
    apiKey      String?
    apiSecret   String?
    accessToken String?
    users       User[]
    products    Product[]
    customers   Customer[]
    orders      Order[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    SyncLog     SyncLog[]
    events      Event[]
}

model User {
    id           String   @id @default(cuid())
    email        String   @unique
    passwordHash String
    tenantId     String
    tenant       Tenant   @relation(fields: [tenantId], references: [id])
    createdAt    DateTime @default(now())
}

model Product {
    id        String   @id @default(cuid())
    tenantId  String
    tenant    Tenant   @relation(fields: [tenantId], references: [id])
    shopId    String // Shopify product id
    title     String
    price     Decimal  @db.Decimal(10, 2)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([tenantId, shopId])
}

model Customer {
    id         String   @id @default(cuid())
    tenantId   String
    tenant     Tenant   @relation(fields: [tenantId], references: [id])
    shopId     String // Shopify customer id
    email      String?
    firstName  String?
    lastName   String?
    totalSpend Decimal  @default(0) @db.Decimal(12, 2)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    orders     Order[]

    @@unique([tenantId, shopId])
}

model Order {
    id          String    @id @default(cuid())
    tenantId    String
    tenant      Tenant    @relation(fields: [tenantId], references: [id])
    shopId      String // Shopify order id
    customerId  String?
    customer    Customer? @relation(fields: [customerId], references: [id])
    totalAmount Decimal   @db.Decimal(12, 2)
    currency    String
    processedAt DateTime
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@unique([tenantId, shopId])
}

model SyncLog {
    id        String   @id @default(cuid())
    tenantId  String
    tenant    Tenant   @relation(fields: [tenantId], references: [id])
    type      String
    status    String
    message   String?
    createdAt DateTime @default(now())
}

model Event {
    id        String   @id @default(cuid())
    tenantId  String
    tenant    Tenant   @relation(fields: [tenantId], references: [id])
    topic     String
    payload   Json
    createdAt DateTime @default(now())
}
